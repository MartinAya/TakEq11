putStrLn (showBoard (Tak.next (beginning3x3) (WhitePlayer,Colocar 1 (Horizontal WhitePlayer))))

prueba mover

--mover :: Tablero -> (TakPlayer, TakAction) -> Tablero
--colocar :: Tablero -> (TakPlayer, TakAction) -> Tablero

colocar1 = Colocar 0 (Vertical WhitePlayer)
colocar2 = Colocar 0 (Vertical BlackPlayer)
mover1 = Mover 0 2 [1,1]

t1 = colocar (getTablero beginning3x3) (WhitePlayer,colocar1)
t2 = colocar t1 (BlackPlayer,colocar2)
t3 = mover t2 (WhitePlayer,mover1)

g = ConstructorTakGame t2 BlackPlayer

prueba apilarFichasEnCasillas

--apilarFichasEnCasillas :: [Casilla] -> [Ficha] -> [Int] -> [Casilla]

fichas = [Horizontal WhitePlayer, Horizontal BlackPlayer, Horizontal WhitePlayer]
casillas = [ConstructorCasilla [], ConstructorCasilla []]

apilarFichasEnCasillas casillas fichas [1,2]

prueba desapilarDeCasilla

--desapilarDeCasilla :: Casilla -> Int -> ([Ficha],Casilla)

fichas = [Horizontal WhitePlayer, Horizontal BlackPlayer, Horizontal WhitePlayer]
casilla = ConstructorCasilla fichas
desapilarDeCasilla casilla 2

prueba casillasEnDireccion

t1 = getTablero beginning3x3

casillasEnDireccion t1 0 1 2

-- prueba de walk

colocar1 = Colocar 0 (Horizontal WhitePlayer)
colocar2 = Colocar 1 (Horizontal BlackPlayer)
colocar3 = Colocar 2 (Horizontal WhitePlayer)
colocar4 = Colocar 3 (Horizontal BlackPlayer)
colocar5 = Colocar 4 (Horizontal WhitePlayer)
colocar6 = Colocar 5 (Horizontal BlackPlayer)
colocar7 = Colocar 6 (Horizontal WhitePlayer)
colocar8 = Colocar 7 (Horizontal BlackPlayer)
colocar9 = Colocar 8 (Horizontal WhitePlayer)

t1 = colocar (getTablero beginning3x3) (WhitePlayer,colocar1)
t2 = colocar t1 (WhitePlayer,colocar2) 
t3 = colocar t2 (WhitePlayer,colocar3)
t4 = colocar t3 (WhitePlayer,colocar4)
t5 = colocar t4 (WhitePlayer,colocar5)
t6 = colocar t5 (WhitePlayer,colocar6)
t7 = colocar t6 (WhitePlayer,colocar7)
t8 = colocar t7 (WhitePlayer,colocar8)
t9 = colocar t8 (WhitePlayer,colocar9)


g = ConstructorTakGame t9 WhitePlayer


posicionesLlenas :: Tablero -> [Int] -> Bool
posicionesLlenas tablero posiciones = foldr1 (&&) llenas
        where
            llenas = [ not (casillaVacia (tablero!!x)) | x <- posiciones]

agregarPuntajeTablero :: Maybe TakPlayer -> Int -> [(TakPlayer, Int)] -> [(TakPlayer, Int)]
agregarPuntajeTablero Nothing puntajeTablero puntaje = puntaje
agregarPuntajeTablero (Just WhitePlayer) puntajeTablero [(WhitePlayer,p1),(BlackPlayer,p2)] = [(WhitePlayer,p1+puntajeTablero),(BlackPlayer,p2)]
agregarPuntajeTablero (Just BlackPlayer) puntajeTablero [(WhitePlayer,p1),(BlackPlayer,p2)] = [(WhitePlayer,p1),(BlackPlayer,p2+puntajeTablero)]


--Eliminia duplicados
distintos:: [Int] -> [Int]
distintos [] = []
distintos[a] = [a]
distintos (x:xs)
   |elem x xs = distintos xs
   |otherwise = [x] ++ distintos xs

subLista :: (Eq a) => [a] -> Int -> Int -> [a]
subLista lista desde hasta
      |hasta > length lista = error "sobrepasa la lista"
      |desde == hasta = [lista!!hasta]
      |desde > hasta = error "indices invalidos"
      |otherwise = take (hasta-desde+1) (drop (desde) lista)